/*! For license information please see a0024cca.f92d3778.js.LICENSE */
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{135:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return d}));var r=t(1),a=t(9),i=(t(0),t(145)),l=t(147),s={id:"chapter-six",title:"Codingeinheit 6 - Klassen und Module",sidebar_label:"Klassen und Module"},u={id:"chapter-six",title:"Codingeinheit 6 - Klassen und Module",description:"import CodeBlock from './CodeBlock';",source:"@site/docs/chapter-six.md",permalink:"/codecamp-website/docs/chapter-six",sidebar_label:"Klassen und Module",sidebar:"docs",previous:{title:"Codingeinheit 5 - Files, Strings und Dictionaries",permalink:"/codecamp-website/docs/chapter-five"},next:{title:"Die Einrichtung deiner Entwicklungsumgebung",permalink:"/codecamp-website/docs/python-env"}},o=[{value:"Import unter anderen Namen",id:"import-unter-anderen-namen",children:[]},{value:"Unter anderen Namen importieren",id:"unter-anderen-namen-importieren",children:[]},{value:"Ohne Namen importieren",id:"ohne-namen-importieren",children:[]},{value:"Herleitung",id:"herleitung",children:[]},{value:"Klassen und Objekte",id:"klassen-und-objekte",children:[]},{value:"Objektmethoden",id:"objektmethoden",children:[{value:"Klassen printen",id:"klassen-printen",children:[]},{value:"Beispiele",id:"beispiele",children:[]}]}],b={rightToc:o},c="wrapper";function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)(c,Object(r.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"module"},"Module"),Object(i.b)("p",null,"Auch in der Programmierung gibt es oft Probleme, die man in jedem Projekt hat (Erstellen von Dateien, Kommunikation \xfcber das Internet). Um den Code wiederzuverwenden, welchen man zuvor geschrieben hat, kann man diesen in sogenannte Module (Libraries) zusammenfassen. In Python sind diese Module einfach nur eine Textdatei oder ein Ordner an Textdateien, welche einfach nur mit dem Zusatz ",Object(i.b)("strong",{parentName:"p"},".py")," gespeichert werden m\xfcssen."),Object(i.b)("p",null,"Wir erstellen, um dieses Beispiel zu veranschaulichen, ein Modul, welches zwei Funktionen enth\xe4lt."),Object(i.b)("p",null,"Wir speichern diesen Codeabschnitt in ",Object(i.b)("inlineCode",{parentName:"p"},"mein_modul.py"),"."),Object(i.b)("p",null,"Jetzt k\xf6nnen wir diesen Code aus einer anderen Datei im gleichen Verzeichnis einfach importieren."),Object(i.b)(l.a,{frame:"https://trinket.io/embed/python3/1e5927079b",mdxType:"CodeBlock"},"\u200b ```python import mein_modul mein_modul.elegal() ``` \u200b"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Beachte:")," Hierbei steht ",Object(i.b)("inlineCode",{parentName:"p"},"mein_modul.elegal()"),' f\xfcr "Die Funktion namens ',Object(i.b)("inlineCode",{parentName:"p"},"elegal"),", welche du unter ",Object(i.b)("inlineCode",{parentName:"p"},"mein_modul"),' gefunden hast".')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Module m\xfcssen stets im Pfad verf\xfcgbar sein!")),Object(i.b)("h2",{id:"import-unter-anderen-namen"},"Import unter anderen Namen"),Object(i.b)("p",null,"Nehmen wir folgendes an: Wir wollen die Funktion aus der Datei ",Object(i.b)("inlineCode",{parentName:"p"},"liste_aller_praezedenzfaelle_der_letzten_zwanzig_jahre.py")," aufrufen."),Object(i.b)("p",null,"Um hier nicht immer den Namen auszuschreiben, gibt es zwei M\xf6glichkeiten:"),Object(i.b)("h2",{id:"unter-anderen-namen-importieren"},"Unter anderen Namen importieren"),Object(i.b)("p",null,"Hierf\xfcr gibt es das ",Object(i.b)("inlineCode",{parentName:"p"},"as"),"-Schl\xfcsselwort in Python."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"import liste_aller_praezedenzfaelle_der_letzten_zwanzig_jahre as liste\n\n# ...\nliste.funktion()\n")),Object(i.b)("h2",{id:"ohne-namen-importieren"},"Ohne Namen importieren"),Object(i.b)("p",null,"Hierf\xfcr gibt es das ",Object(i.b)("inlineCode",{parentName:"p"},"from"),"-Schl\xfcsselwort in Python, womit man einzelne Methoden importiert. Danach kann man diese, wie die Standardmethoden, ohne Modulnamen aufrufen."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from mein_modul import elegal\n\nelegal() # Elegal ist super!\n")),Object(i.b)("p",null,"Hierbei haben wir einfach die Funktion ",Object(i.b)("inlineCode",{parentName:"p"},"elegal")," importiert, nicht ",Object(i.b)("inlineCode",{parentName:"p"},"kpmg"),". Wenn man alles importieren will, schreibt man einfach,"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from mein_modul import *\n")),Object(i.b)("p",null,"wobei der ",Object(i.b)("inlineCode",{parentName:"p"},"*"),' f\xfcr "alles" steht.'),Object(i.b)("h1",{id:"klassen"},"Klassen"),Object(i.b)("h2",{id:"herleitung"},"Herleitung"),Object(i.b)("p",null,"Betrachten wir folgendes Problem: Wir wollen eine Funktion schreiben, welche den Wert eines beliebigen Autos anhand dessen Attribute berechnet.\nHier sei der Preis abh\xe4ngig von"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Baujahr des Autos"),Object(i.b)("li",{parentName:"ul"},"Kaufpreis im Jahre des Baujahrs"),Object(i.b)("li",{parentName:"ul"},"Marke"),Object(i.b)("li",{parentName:"ul"},"Modell"),Object(i.b)("li",{parentName:"ul"},"Extraausstattungen"),Object(i.b)("li",{parentName:"ul"},"Unfallfrei")),Object(i.b)("p",null,"Dies w\xfcrde im Code wie folgt aussehen:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"def wert_rechner(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei):\n    letzter = letzter_verkaufswert(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    maximal = hoechster_verkaufswert(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    minimal = niederigster_verkaufswert(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    liste = listenpreis(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    if (minimal < listenpreis):\n        return (liste*maximal*letzter)/3\n    else:\n        return (minimal*maximal*lezter)/3\n")),Object(i.b)("p",null,"Hier fallen direkt 3 Probleme auf:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Es ist nur sehr schwierig lesbar"),Object(i.b)("li",{parentName:"ol"},"Man wiederholt sich sehr oft"),Object(i.b)("li",{parentName:"ol"},"Es ist einfach aus Versehen eine Eigenschaft zu vergessen")),Object(i.b)("p",null,'Um diese Probleme zu l\xf6sen gab es viele Ans\xe4tze, wovon der meist genutzte die "Objektorientierte Programmierung" ist.'),Object(i.b)("h2",{id:"klassen-und-objekte"},"Klassen und Objekte"),Object(i.b)("p",null,"Um Probleme der reellen Welt in Code zu abstrahieren bietet es sich an, hier auch mit einem Auto, statt mit einer Liste an Werten zu arbeiten."),Object(i.b)("p",null,'Und genau dies sind Klassen und Objekte. Hier ist eine Klasse "Auto" quasi der "Bauplan" f\xfcr Autos, welcher definiert, aus was sich ein Auto zusammensetzt.'),Object(i.b)("p",null,"Nach obigen \xdcberlegungen m\xfcssen wir nur noch definieren, wie genau der Bauplan ein Auto erstellen soll:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Bauplan Auto:\n    Erstellung des Autos:\n    (Hierf\xfcr ben\xf6tige ich Baujahr, Kaufpreis, Marke, Modell,\n      Extraausstattungen und ob es unfallfrei ist.)\n\n    Setze fest, dass bei diesem Auto das Baujahr das \xfcbergebene Baujahr ist.\n    Dann setze fest, dass bei diesem Auto der Kaufpreis dem \xfcbergebenen gleicht.\n    Dann setze fest, dass bei diesem Auto die Marke und das Modell \xfcbereinstimmt.\n    Dann setze fest, dass die Ausstattung \xfcbereinstimmt.\n    Dann halte fest, ob das Auto unfallfrei ist.\nBauplan Ende.\n")),Object(i.b)("p",null,"Hierf\xfcr sieht der Pythoncode sehr \xe4hnlich aus:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"class Auto:\n    def __init__(self,baujahr, kaufpreis,marke,modell,ausstattung,unfallfrei):\n        self.baujahr = baujahr\n        self.kaufpreis = kaufpreis\n        self.marke = marke\n        self.modell = modell\n        self.ausstattung = ausstattung\n        self.unfallfrei = unfallfrei\n")),Object(i.b)("p",null,"Auch wenn das meiste selbsterkl\xe4rend sein sollte, hier doch noch ein paar Hinweise:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"class")," beschreibt, dass eine Klasse beginnt, genau so wie ",Object(i.b)("inlineCode",{parentName:"li"},"def")," eine Funktion."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"self")," bedeutet, dass es auf das Objekt des Bauplans (hier das einzelne Auto) bezogen ist. Mehr hierzu sp\xe4ter."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"__init__"),' ist ein von Python festgelegter Name. Dieser kommt von "initialisation" und wird bei der Erstellung aufgerufen. Allgemein als Richtlinie gilt: ',Object(i.b)("inlineCode",{parentName:"li"},"__funktionsname__")," ist eine interne Funktion.")),Object(i.b)("p",null,"Nun k\xf6nnen wir unser erstes Auto erstellen! Und dann einfach mit ",Object(i.b)("inlineCode",{parentName:"p"},"autoobjekt.information")," diese Aufrufen!"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'auto_zum_verkauf = Auto(2019, 50000, "Audi", "A4", "", True)\n\nprint("Das Auto ist ein " + auto_zum_verkauf.marke\n      + " " + auto_zum_verkauf.modell\n      + " aus dem Jahr " + str(auto_zum_verkauf.baujahr))\n')),Object(i.b)("p",null,"Hierbei ist ",Object(i.b)("inlineCode",{parentName:"p"},"auto_zum_verkauf")," unser Autoobjekt."),Object(i.b)("p",null,"Nun k\xf6nnen wir ",Object(i.b)("strong",{parentName:"p"},"ENDLICH")," unsere Methode sch\xf6ner schreiben!"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"def wert_rechner(auto):\n    letzter = letzter_verkaufswert(auto)\n\n    maximal = h\xf6chster_verkaufswert(auto)\n\n    minimal = niederigster_verkaufswert(auto)\n\n    liste = listenpreis(auto)\n\n    if (minimal < listenpreis):\n        return (liste*maximal*letzter)/3\n    else:\n        return (minimal*maximal*lezter)/3\n")),Object(i.b)("h2",{id:"objektmethoden"},"Objektmethoden"),Object(i.b)("p",null,"Wenn man weiter an Objekte in der reellen Welt denkt, kann man Funktionen in zwei Kategorien aufteilen:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Dinge, die an dem Auto selbst passieren (fahren, bremsen) (Objektmethode)"),Object(i.b)("li",{parentName:"ul"},"Dinge, f\xfcr die ein Auto gebraucht wird (Belegen eines Parkplatzes) (Normale Funktion)")),Object(i.b)("p",null,"Objektmethoden zeichnen sich dadurch aus, dass es keinen Sinn hat, diese ohne das Objekt aufzurufen. Es ist nicht m\xf6glich, ein Auto zu fahren, welches nicht existiert."),Object(i.b)("p",null,"In Python schreibt man Objektmethoden in Klassen selbst, wof\xfcr das oben benannte ",Object(i.b)("inlineCode",{parentName:"p"},"self")," daf\xfcr steht, dass es sich auf das eigene Objekt bezieht."),Object(i.b)("p",null,"Als Beispiel nun mit der Methode ",Object(i.b)("inlineCode",{parentName:"p"},"unfall_bauen"),", welche als Folge unfallfrei auf falsch setzt."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"class Auto:\n    def __init__(self,baujahr, kaufpreis,marke,modell,ausstattung,unfallfrei):\n        self.baujahr = baujahr\n        self.kaufpreis = kaufpreis\n        self.marke = marke\n        self.modell = modell\n        self.ausstattung = ausstattung\n        self.unfallfrei = unfallfrei\n\n    def unfall_bauen(self):\n        self.unfallfrei = False\n")),Object(i.b)("h3",{id:"klassen-printen"},"Klassen printen"),Object(i.b)("p",null,"Zuletzt ist es noch sinnvoll, dass das printen wie erwartet klappt."),Object(i.b)("p",null,"Wie wir bereits gelernt haben, sind Funktionen wie ",Object(i.b)("inlineCode",{parentName:"p"},"__init__")," von Python selbst gestellte Funktionen.\nZum printen von Funktionen gibt es nun die von Python gestellte ",Object(i.b)("inlineCode",{parentName:"p"},"__str__"),", welche man einfach definieren muss. Beispiel:"),Object(i.b)(l.a,{frame:"https://trinket.io/embed/python3/93841f6c32",mdxType:"CodeBlock"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'class Person:\n    def __init__(self, vorname, nachname, alter):\n        self.vorname = vorname\n        self.nachname = nachname\n        self.alter = alter\n\n    # Coole weitere Funktionen\n    # ...\n\n    def __str__(self):\n        string_zur_ausgabe = self.vorname + " " + self.nachname + ": " + str(self.alter) + " Jahre alt."\n        return string_zur_ausgabe\n\njohn = Person("John", "Doe", 36)\nprint(john)\n'))),Object(i.b)("h3",{id:"beispiele"},"Beispiele"),Object(i.b)("p",null,"So w\xfcrde man z.B. einen Verein definieren:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'class Verein:\n    name = None\n    mitglieder = []\n    vorsitzender = None\n\n    # Konstruktor\n    def __init__(self, name, vorsitzender):\n        self.name = name\n        self.vorsitzender = vorsitzender\n\n    # Hier wird eine Person als neues_mitglied erwartet\n    # Dies ist eine Objektmethode, da es im Verein selbst passiert.\n    # Beachte: Der print von neues Mitglied klappt nur,\n    # da __str__ hierf\xfcr definiert ist.\n    def mitglied_beitritt(self, neues_mitglied):\n        self.mitglieder.append(neues_mitglied)\n        print("Neues Mitglied!")\n        print(neues_mitglied)\n\n    def mitgleid_austritt(self, altes_mitglied):\n        if altes_mitglied not in self.mitglieder:\n            print("Diese Person war nie im Verein!")\n            return\n        else:\n            print("Folgende Person verliess den Verein:")\n            print(altes_mitglied)\n            print(":(")\n')))}d.isMDXComponent=!0},144:function(e,n,t){var r;!function(){"use strict";var t={}.hasOwnProperty;function a(){for(var e=[],n=0;n<arguments.length;n++){var r=arguments[n];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var l=a.apply(null,r);l&&e.push(l)}else if("object"===i)for(var s in r)t.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(n,[]))||(e.exports=r)}()},145:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=a.a.createContext({}),b=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s({},n,{},e)),t},c=function(e){var n=b(e.components);return a.a.createElement(o.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),c=b(t),d=r,p=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return t?a.a.createElement(p,s({ref:n},o,{components:t})):a.a.createElement(p,s({ref:n},o))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=t[o];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},147:function(e,n,t){"use strict";var r=t(6),a=t(0),i=t.n(a),l=(t(23),t(17),t(18),t(144)),s=t.n(l),u=t(118),o=t.n(u),b={left:37,right:39};var c=function(e){var n=e.block,t=e.children,r=e.defaultValue,l=e.values,u=Object(a.useState)(r),c=u[0],d=u[1],m=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:s()("tabs",{"tabs--block":n})},l.map((function(e){var n=e.value,t=e.label;return i.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":c===n,className:s()("tab-item",o.a.tabItem,{"tab-item--active":c===n}),key:n,ref:function(e){return m.push(e)},onKeyDown:function(e){return function(e,n,t){switch(t.keyCode){case b.right:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case b.left:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(m,e.target,e)},onFocus:function(){return d(n)},onClick:function(){return d(n)}},t)}))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(t).filter((function(e){return e.props.value===c}))[0]))};var d=function(e){return i.a.createElement("div",null,e.children)};t.d(n,"a",(function(){return m}));var m=function(e){function n(){return e.apply(this,arguments)||this}return Object(r.a)(n,e),n.prototype.render=function(){return i.a.createElement(c,{defaultValue:"repl",values:[{label:"Python Interpreter",value:"repl"},{label:"Python Code",value:"py"}]},i.a.createElement(d,{value:"repl"},i.a.createElement("iframe",{src:this.props.frame,width:"100%",height:"356",frameborder:"0",marginwidth:"0",marginheight:"0",allowfullscreen:!0})),i.a.createElement(d,{value:"py"},this.props.children))},n}(i.a.Component)}}]);