(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{133:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return h}));var i,r=n(1),a=n(9),o=(n(0),n(145)),s={id:"chapter-five",title:"Codingeinheit 5 - Files, Strings und Dictionaries",sidebar_label:"Files, Strings und Dictionaries"},c={id:"chapter-five",title:"Codingeinheit 5 - Files, Strings und Dictionaries",description:"\u200b",source:"@site/docs/chapter-five.md",permalink:"/codecamp-website/docs/chapter-five",sidebar_label:"Files, Strings und Dictionaries",sidebar:"docs",previous:{title:"Codingeinheit 4 - Listen",permalink:"/codecamp-website/docs/chapter-four"},next:{title:"Codingeinheit 6 - Klassen und Module",permalink:"/codecamp-website/docs/chapter-six"}},d=[{value:"Multiplikation",id:"multiplikation",children:[]}],l=(i="CodeBlock",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",e)}),p={rightToc:d},u="wrapper";function h(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)(u,Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"\u200b\nimport CodeBlock from './CodeBlock';\n\u200b"),Object(o.b)("h1",{id:"strings"},"Strings"),Object(o.b)("p",null,"\u200b"),Object(o.b)("h2",{id:"multiplikation"},"Multiplikation"),Object(o.b)("p",null,"\u200b\nNeben der Verkettung von Strings ist auch die Multiplikation m\xf6glich, hierbei wird der String einfach ",Object(o.b)("inlineCode",{parentName:"p"},"n"),"-mal wiederholt.\n\u200b"),Object(o.b)(l,{frame:"https://trinket.io/embed/python3/d24bc2c949",mdxType:"CodeBlock"},'\u200b ```python hallo = "Hallo" zehn_hallos = hallo * 10 # Hier n = 10 print(zehn_hallos) ``` \u200b'),'\u200b \u200b ## Indexing \u200b Wie bereits bei Listen kann man auch bei Buchstaben und Teilstrings per Index extrahieren. \u200b ```python str = "eLegal Goettingen" print(str[1]) # L ``` \u200b ## Negatives Indexieren \u200b Analog ist auch negative Indexierung anwendbar. \u200b ```python str = "eLegal Goettingen" print(str[-1]) # n ``` \u200b ## Slicing \u200b Der Doppelpunkt-Operator `:` ist unteranderem mit Strings nutzbar. Dabei stellt dieser sicher, dass nur innerhalb der Liste gesucht wird. \u200b Probieren geht \xfcber studieren, du bist also wieder an der Reihe: \u200b',Object(o.b)(l,{frame:"https://trinket.io/embed/python3/2089a02b40",mdxType:"CodeBlock"},'\u200b ```python start, end = 6 , 13 str = "Hallo Digitalisierung!" print(str[start:end]) print(str[start]) print(str[end]) print(str[:]) print(str is str[:]) ``` \u200b'),'\u200b ## "In" Operator \u200b Mit dem `in` Keyword l\xe4sst sich feststellen, ob eine bestimmte Zeichenfolge in einem String enthalten ist \u200b',Object(o.b)(l,{frame:"https://trinket.io/embed/python3/b4267dc7a1",mdxType:"CodeBlock"},"\u200b ```python str = 'eLegal Goettingen' print('Legal' in str) print('Goettingen' in str) if 'KPMG Law' not in str: print(\"Hier laeuft irgendetwas falsch!!!!!\") ``` \u200b"),'\u200b \u200b ## Escaping \u200b In Python ist "\\\\" ein besonderer Char. Er wird auch "escape character" genannt. \u200b Die wichtigsten "escape characters" sind: \u200b - `"\\n"` = Newline - `"\\t"` = Tab - `"\\\\"` = Backslash - `"\\\'"` = Einzelne Anf\xfchrungszeichen \u200b Der Folgende String ist nicht sehr \xfcbersichtlich, wenn man ihn ausgibt. F\xfcge doch am Satzende eine neue Zeile an. \u200b \u200b',Object(o.b)(l,{frame:"https://trinket.io/embed/python3/cdeede7618",mdxType:"CodeBlock"},'\u200b ```python string = "eLegal ist ein toller Verein, denn er stellt Bier.Ich m\xf6chte nicht in dieser Zeile stehen." print(string) ``` \u200b'),"\u200b \u200b ## String Methoden (Basics) \u200b - `upper()` konvertiert den String zu GROSSBUCHSTABEN - `lower()` konvertiert den String zu Kleinbuchstaben - `count(char)` Z\xe4hlt die Buchstaben in einem String - `len()` Gibt die Menge an Buchstaben zur\xfcck \u200b \u200b",Object(o.b)(l,{frame:"https://trinket.io/embed/python3/121fc6d856",mdxType:"CodeBlock"},"\u200b ```python str = 'eLegal Goettingen' print(str.upper()) print(str.lower()) print(str.count('e')) print(len(str)) ``` \u200b"),"\u200b \u200b ## String Formatierung \u200b Mit der `format` Funktion kann man _Werte_, die eingesetzt werden sollen, templaten (vorgeben). \u200b",Object(o.b)(l,{frame:"https://trinket.io/embed/python3/a1a8cb17b5",mdxType:"CodeBlock"}),"\u200b \u200b # Dictionaries \u200b Ein `dict` ist eine **Key-Value**-Datenstruktur. Als Beispiel: \u200b",Object(o.b)(l,{frame:"https://trinket.io/embed/python3/4157184884",mdxType:"CodeBlock"}),"\u200b \u200b Nat\xfcrlich kann ein Dictionary auch mehrere Key-Value-Paare haben. \u200b Hierbei k\xf6nnen unter anderem auch Listen als **Value** in einem Dictionary verwendet werden. Value eines Dictionaries kann auch erneut ein Dictionary sein. \u200b",Object(o.b)(l,{frame:"https://trinket.io/embed/python3/c6e483f61f",mdxType:"CodeBlock"},"\u200b"),"\u200b \u200b \u200b Eine Besonderheit ist jedoch, dass diese Strukturen nicht als **Key** verwendet werden k\xf6nnen. F\xfchre zum testen folgenden Code aus: \u200b",Object(o.b)(l,{frame:"https://trinket.io/embed/python3/fe5e541c01",mdxType:"CodeBlock"}),"\u200b Ein Dictionary kann auch ohne Inhalt definiert werden. \u200b",Object(o.b)(l,{frame:"https://trinket.io/embed/python3/531e776cd8",mdxType:"CodeBlock"},"\u200b ```python kopf_nach_klausur = ",'kopf_nach_klausur["jura"] = "es kommt drauf an" print(kopf_nach_klausur) ``` \u200b'),"\u200b # Files \u200b Wir lernen in diesem Abschnitt die wesentlichen Interaktionen mit Textdateien kennen. \u200b ## Textdatei lesen \u200b",Object(o.b)(l,{frame:"https://trinket.io/embed/python3/c34f8d4e28",mdxType:"CodeBlock"},"\u200b ```python def lese_datei_ein(pfad_zur_datei): # Hier fragen wir mit der open()-Funktion Zugriff auf die Datei an. # Hierbei bedeuten die letzten beiden Parameter: # 'r' = Art des Zugriffes #   zB 'r' = 'read', 'w' = write, 'rw' = read-write # encoding='utf-8' = Unterstuetzung fuer Umlaute. Einfach immer nutzen referenz_auf_datei = open(pfad_zur_datei, 'r', encoding='utf-8') # .read() liesst die ganze Datei als Zeichenkette ein. print(referenz_auf_datei.read()) # WICHTIG: # Eine Datei muss immer geschlossen werden. # Hierbei wird dem System gesagt, dass diese nicht mehr gebraucht wird. # Vergisst man dies, kann man zB die Datei nicht mehr loeschen, # bis das Programm beendet ist. referenz_auf_datei.close() lese_datei_ein('textfile.txt') ``` \u200b"),"\u200b \u200b ## Text schreiben \u200b ```python #!/usr/bin/env python3 \u200b def main(): f = open('textfile.txt', 'w', encoding='utf-8') # Wichtig! Wir benutzen hier den Schreibmodus 'w'. s = 'eLegal Goettingen ist cool!\\n' f.write(s) f.close() \u200b if __name__ == '__main__': main() ``` \u200b ## `with`-Operator \u200b Mit dem `with`-Operator lassen sich sehr einfach und \xfcbersichtlich Variablen f\xfcr einen bestimmten Geltungsbereich schaffen. \u200b ```python #!/usr/bin/env python3 \u200b def main(): with open('textfile.txt', 'w', encoding='utf-8') as f: s = f.read() print(s) # Textinhalt der Datei \u200b if __name__ == '__main__': main() ```")}h.isMDXComponent=!0},145:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),l=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},p=function(e){var t=l(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),u=i,b=p["".concat(o,".").concat(u)]||p[u]||h[u]||a;return n?r.a.createElement(b,s({ref:t},d,{components:n})):r.a.createElement(b,s({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);