(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{112:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return h}));var i=t(0),r=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=r.a.createContext({}),s=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},p=function(e){var n=s(e.components);return r.a.createElement(o.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=Object(i.forwardRef)((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,o=b(e,["components","mdxType","originalType","parentName"]),p=s(t),u=i,m=p["".concat(l,".").concat(u)]||p[u]||d[u]||a;return t?r.a.createElement(m,c({ref:n},o,{components:t})):r.a.createElement(m,c({ref:n},o))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=m;var c={};for(var b in n)hasOwnProperty.call(n,b)&&(c[b]=n[b]);c.originalType=e,c[u]="string"==typeof e?e:i,l[1]=c;for(var o=2;o<a;o++)l[o]=t[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},99:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"metadata",(function(){return b})),t.d(n,"default",(function(){return p}));var i=t(1),r=t(6),a=(t(0),t(112)),l={id:"chapter-five",title:"Codingeinheit 5 - Strings und Dictionaries",sidebar_label:"Strings und Dictionaries"},c=[{value:"Multiplikation",id:"multiplikation",children:[]},{value:"Indexing",id:"indexing",children:[]},{value:"Negatives Indizieren",id:"negatives-indizieren",children:[]},{value:"Slicing",id:"slicing",children:[]},{value:'"In" Operator',id:"in-operator",children:[]},{value:"Escaping",id:"escaping",children:[]},{value:"String Methoden (Basics)",id:"string-methoden-basics",children:[]},{value:"String Formatierung",id:"string-formatierung",children:[]},{value:"Textdatei lesen",id:"textdatei-lesen",children:[{value:"Code",id:"code",children:[]}]},{value:"Text schreiben",id:"text-schreiben",children:[{value:"Code",id:"code-1",children:[]}]}],b={id:"chapter-five",title:"Codingeinheit 5 - Strings und Dictionaries",description:"# Strings",source:"@site/docs/chapter-five.md",permalink:"/codecamp-website/docs/chapter-five",sidebar_label:"Strings und Dictionaries",sidebar:"docs",previous:{title:"Codingeinheit 4 - Listen",permalink:"/codecamp-website/docs/chapter-four"},next:{title:"Codingeinheit 6 - Klassen und Module",permalink:"/codecamp-website/docs/chapter-six"}},o={rightToc:c,metadata:b},s="wrapper";function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)(s,Object(i.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"strings"},"Strings"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"from elegal_assert import *\n")),Object(a.b)("h2",{id:"multiplikation"},"Multiplikation"),Object(a.b)("p",null,"Neben der Verkettung von Strings ist auch die Multiplikation moeglich, hierbei wird der String einfach ",Object(a.b)("inlineCode",{parentName:"p"},"n"),"-mal wiederholt."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'hallo = "Hallo"\nzehn_hallos = hallo * 10 # Hier n = 10\nprint(zehn_hallos)\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"HalloHalloHalloHalloHalloHalloHalloHalloHalloHallo\n")),Object(a.b)("h2",{id:"indexing"},"Indexing"),Object(a.b)("p",null,"Wie bereits bei Listen kann man auch bei Buchstaben und Teilstrings per Index extrahieren."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'str = "eLegal Goettingen"\nprint(str[1])\n')),Object(a.b)("h2",{id:"negatives-indizieren"},"Negatives Indizieren"),Object(a.b)("p",null,"Analog ist auch negative Indizierung anwendbar."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'str = "eLegal Goettingen"\nprint(str[-1])\n')),Object(a.b)("h2",{id:"slicing"},"Slicing"),Object(a.b)("p",null,"Wie bei Listen ist der Doppelpunkt-Operator ",Object(a.b)("inlineCode",{parentName:"p"},":")," mit Strings nutzbar."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'start, end = 6 , 13\nstr = "Hallo Digitalisierung!"\nprint(str[start:end])\nprint(str[start:])\nprint(str[:end])\nprint(str[:])\nprint(str is str[:])\n')),Object(a.b)("h2",{id:"in-operator"},'"In" Operator'),Object(a.b)("p",null,"Mit dem ",Object(a.b)("inlineCode",{parentName:"p"},"in")," Keyword laesst sich feststellen, ob eine bestimmte Zeichenfolge in einem String enthalten ist"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"str = 'eLegal Goettingen'\nprint('Legal' in str)\nprint('Goettingen' in str)\nif 'KPMG Law' not in str:\n    print(\"Hier laeuft irgendetwas falsch!!!!!\")\n")),Object(a.b)("h2",{id:"escaping"},"Escaping"),Object(a.b)("p",null,'in Python ist "',"\\",'" ein besonderer Char. Er wird auch "escape character" genannt.'),Object(a.b)("p",null,'Die wichtigsten "escape characters" sind'),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"\\n"')," = Newline"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"\\t"')," = Tab"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"\\\\"')," = Backslash"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"\\\'"')," = Einzel Anf\xfchrungszeichen")),Object(a.b)("p",null,"Der Folgende String ist nicht sehr \xfcbersichtlich, wenn man ihn ausgibt. F\xfcge doch am Satzende eine neue Zeile an."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'string = "eLegal ist ein toller Verein, denn er stellt Bier.Ich m\xf6chte nicht in dieser Zeile stehen."\nprint(string)\n\ncheck_string_for_elegal(string)\n')),Object(a.b)("h2",{id:"string-methoden-basics"},"String Methoden (Basics)"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"upper()")," konvertiert den String zu Grossbuchstaben"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"lower()")," konvertiert den String zu Kleinbuchstaben"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"count(char)")," Zaehlt die Buchstaben in einem String"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"len()")," Gibt die Menge an Buchstaben zurueck")),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"str = 'eLegal Goettingen'\nprint(str.upper())\nprint(str.lower())\nprint(str.count('e'))\nprint(len(str))\n")),Object(a.b)("h2",{id:"string-formatierung"},"String Formatierung"),Object(a.b)("p",null,"Mit der ",Object(a.b)("inlineCode",{parentName:"p"},"format")," Funktionen lassen sich ",Object(a.b)("em",{parentName:"p"},"Werte")," templaten."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"str = \"Hallo {name}! Lass uns doch um {zeit} {stunden} Stunden Zivilrecht lernen.\".format(name='Justus', zeit='09:00', stunden=16)\n\nprint(str)\n")),Object(a.b)("h1",{id:"dictionaries"},"Dictionaries"),Object(a.b)("p",null,"Ein ",Object(a.b)("inlineCode",{parentName:"p"},"dict")," ist eine ",Object(a.b)("strong",{parentName:"p"},"Key-Value"),"-Datenstruktur mit der Syntax ",Object(a.b)("inlineCode",{parentName:"p"},"{bezeichner : wert_hinter_dem_bezeichner}"),".\nAls Beispiel:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'digitale_bibliothek = {"BGB" : "Buch 1\\n Allgemeiner Teil\\n Abschnitt 1 ..."}\nprint(digitale_bibliothek["BGB"])\n')),Object(a.b)("p",null,"Natuerlich kann ein Dictionary auch mehrere Key-Value-Paare haben."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'telefonbuch = [\n    {"name": "Heinz", "telefonnummer": \'+495512313\'},\n    {"name": "Sven", "telefonnummer": \'+49555123213\'}\n]\n\nfor eintrag in telefonbuch:\n    print("{} ist unter der Nummer {} erreichbar.".format(eintrag["name"], eintrag[\'telefonnummer\']))\n\n\n\n# Im folgenden bezieht sich hier die 0 auf das erste Dictionary in der Telefonbuchliste.\nprint(telefonbuch[0].keys())\nprint(telefonbuch[0].values())\n')),Object(a.b)("p",null,"Hierbei koennen unter anderem auch Listen als ",Object(a.b)("strong",{parentName:"p"},"Value")," in einem Dictionary verwendet werden. Value eines Dictionaries kann auch erneut ein Dictionary sein."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'dict_1 = {\n    "dein_dictionary" : {"key" : "value"}\n}\n')),Object(a.b)("p",null,"Eines Besonderheit ist jedoch, dass diese Strukturen nicht als ",Object(a.b)("strong",{parentName:"p"},"Key")," verwendet werden k\xf6nnen.\nF\xfchre zum testen folgenden Code aus:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"a = {[1,2]:[3,4]}\n")),Object(a.b)("p",null,"Ein Dictionary kann auch ohne Inhalt definiert werden."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),'kopf_nach_klausur = {}\nkopf_nach_klausur["jura"] = "es kommt drauf an"\nprint(kopf_nach_klausur)\n')),Object(a.b)("h1",{id:"files"},"Files"),Object(a.b)("p",null,"Wir lernen in diesem Abschnitt die wesentlichen Interaktionen mit Textdateien kennen."),Object(a.b)("h2",{id:"textdatei-lesen"},"Textdatei lesen"),Object(a.b)("h3",{id:"code"},"Code"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"def lese_datei_ein(pfad_zur_datei):\n    # Hier fragen wir mit der open()-Funktion Zugriff auf die Datei an.\n    # Hierbei bedeuten die letzten beiden Parameter:\n    # 'r' = Art des Zugriffes\n    #   zB 'r' = 'read', 'w' = write, 'rw' = read-write\n    # encoding='utf-8' = Unterstuetzung fuer Umlaute. Einfach immer nutzen\n    referenz_auf_datei = open(pfad_zur_datei, 'r', encoding='utf-8')\n    # .read() liesst die ganze Datei als Zeichenkette ein.\n    print(referenz_auf_datei.read())\n    # WICHTIG:\n    # Eine Datei muss immer geschlossen werden.\n    # Hierbei wird dem System gesagt, dass diese nicht mehr gebraucht wird.\n    # Vergisst man dies, kann man zB die Datei nicht mehr loeschen,\n    # bis das Programm beendet ist.\n    referenz_auf_datei.close()\n\nlese_datei_ein('textfile.txt')\n")),Object(a.b)("h2",{id:"text-schreiben"},"Text schreiben"),Object(a.b)("h3",{id:"code-1"},"Code"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"#!/usr/bin/env python3\n\ndef main():\n    f = open('textfile.txt', 'w', encoding='utf-8') # Wichtig! Wir benutzen hier den Schreibmodus 'w'.\n    s = 'eLegal Goettingen ist cool!\\n'\n    f.write(s)\n    f.close()\n\nif __name__ == '__main__':\n    main()\n")),Object(a.b)("p",null,"Alternativ mit ",Object(a.b)("inlineCode",{parentName:"p"},"with"),"-Operator"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-python"}),"#!/usr/bin/env python3\n\ndef main():\n    with open('textfile.txt', 'w', encoding='utf-8') as f:\n        s = 'eLegal Goettingen ist cool!\\n'\n        f.write(s)\n\nif __name__ == '__main__':\n    main()\n")))}p.isMDXComponent=!0}}]);