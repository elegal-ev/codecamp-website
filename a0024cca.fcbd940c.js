(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"metadata",(function(){return u})),t.d(n,"default",(function(){return d}));var a=t(1),r=t(6),i=(t(0),t(112)),l={id:"chapter-six",title:"Codingeinheit 6 - Klassen und Module",sidebar_label:"Klassen und Module"},s=[{value:"Import unter anderen Namen",id:"import-unter-anderen-namen",children:[]},{value:"Unter anderen Namen importieren",id:"unter-anderen-namen-importieren",children:[]},{value:"Ohne Namen importieren",id:"ohne-namen-importieren",children:[]},{value:"Herleitung",id:"herleitung",children:[]},{value:"Klassen und Objekte",id:"klassen-und-objekte",children:[]},{value:"Objektmethoden",id:"objektmethoden",children:[{value:"Klassen printen",id:"klassen-printen",children:[]},{value:"Beispiele",id:"beispiele",children:[]}]}],u={id:"chapter-six",title:"Codingeinheit 6 - Klassen und Module",description:"# Klassen und Module",source:"@site/docs/chapter-six.md",permalink:"/codecamp-website/docs/chapter-six",sidebar_label:"Klassen und Module",sidebar:"docs",previous:{title:"Codingeinheit 5 - Strings und Dictionaries",permalink:"/codecamp-website/docs/chapter-five"},next:{title:"Abschlussprojekt",permalink:"/codecamp-website/docs/project"}},o={rightToc:s,metadata:u},b="wrapper";function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(b,Object(a.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"klassen-und-module"},"Klassen und Module"),Object(i.b)("h1",{id:"module"},"Module"),Object(i.b)("p",null,"In der Programmierung gibt es oft Probleme, die man in jedem Projekt hat (Erstellen von Dateien, Kommunikation ueber Internet). Um den Code wiederzuverwenden, kann man diese in sogenannte Module (Libraries) zusammenfassen. In Python sind diese Module einfach nur eine Textdatei oder ein Ordner an Textdateien"),Object(i.b)("p",null,"Wir erstellen um dieses Beispiel zu veranschaulichen ein Modul, welches zwei Funktionen enthalten, welche etwas ausgeben."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from elegal_assert import *\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'def elegal():\n    print("Elegal ist super!")\n\ndef kmpg():\n    print("KPMG ist krass!")\n')),Object(i.b)("p",null,"Wir speichern diesen Codeabschnitt in ",Object(i.b)("inlineCode",{parentName:"p"},"mein_modul.py"),"."),Object(i.b)("p",null,"Jetzt koennen wir diesen Code aus einer anderen Datei im gleichen Verzeichnis einfach importieren."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import mein_modul\n\nmein_modul.elegal()\nmein_modul.kpmg()\n")),Object(i.b)("p",null,"Beachte: Hierbei steht ",Object(i.b)("inlineCode",{parentName:"p"},"mein_modul.elegal()"),' fuer "Die Funktion namens ',Object(i.b)("inlineCode",{parentName:"p"},"elegal"),", welche du unter ",Object(i.b)("inlineCode",{parentName:"p"},"mein_modul"),' gefunden hast".'),Object(i.b)("h4",{id:"anmerkung"},"Anmerkung"),Object(i.b)("p",null,"Module muessen stets im Pfad verfuegbar sein!"),Object(i.b)("h2",{id:"import-unter-anderen-namen"},"Import unter anderen Namen"),Object(i.b)("p",null,"Nehmen wir folgendes an, wir wollen die Funktion aus der Datei ",Object(i.b)("inlineCode",{parentName:"p"},"liste_aller_praezedenzfaelle_der_letzten_zwanzig_jahre.py"),"."),Object(i.b)("p",null,"Um hier nicht immer den Namen auszuschreiben, gibt es zwei Moeglichkeiten:"),Object(i.b)("h2",{id:"unter-anderen-namen-importieren"},"Unter anderen Namen importieren"),Object(i.b)("p",null,"Hierfuer gibt es ",Object(i.b)("inlineCode",{parentName:"p"},"as"),"-Schluesselwort in Python."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import liste_aller_praezedenzfaelle_der_letzten_zwanzig_jahre as liste\n\n# ...\nliste.funktion()\n")),Object(i.b)("h2",{id:"ohne-namen-importieren"},"Ohne Namen importieren"),Object(i.b)("p",null,"Hierfuer gibt es das ",Object(i.b)("inlineCode",{parentName:"p"},"from"),"-Schluesselwort in Python, womit man einzelne Methoden importiert. Danach kann man diese wie die Standardmethoden ohne Modulnamen aufrufen."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from mein_modul import elegal\n\nelegal() # Elegal ist super!\n")),Object(i.b)("p",null,"Hierbei haben wir einfach die Funktion ",Object(i.b)("inlineCode",{parentName:"p"},"elegal")," importiert, nicht ",Object(i.b)("inlineCode",{parentName:"p"},"kpmg"),". Wenn man alles importieren will, schreibt man einfach"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from mein_modul import *\n")),Object(i.b)("p",null,"wobei der ",Object(i.b)("inlineCode",{parentName:"p"},"*"),' fuer "alles" steht.'),Object(i.b)("h1",{id:"klassen"},"Klassen"),Object(i.b)("h2",{id:"herleitung"},"Herleitung"),Object(i.b)("p",null,"Betrachten wir folgendes Problem: Wir wollen eine Funktion schreiben, welche den Wert eines beliebigen Autos anhand dessen Attribute berechnet.\nHier sei der Preis abhaengig von"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Baujahr des Autos"),Object(i.b)("li",{parentName:"ul"},"Kaufpreis im Jahre des Baujahrs"),Object(i.b)("li",{parentName:"ul"},"Marke"),Object(i.b)("li",{parentName:"ul"},"Modell"),Object(i.b)("li",{parentName:"ul"},"Extraausstattungen"),Object(i.b)("li",{parentName:"ul"},"Unfallfrei")),Object(i.b)("p",null,"Dies wuerde im Code wiefolgt aussehen:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"def wert_rechner(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei):\n    letzter = letzter_verkaufswert(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    maximal = hoechster_verkaufswert(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    minimal = niederigster_verkaufswert(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    liste = listenpreis(baujahr, kaufpreis, marke, modell, ausstattung, unfallfrei)\n\n    if (minimal < listenpreis):\n        return (liste*maximal*letzter)/3\n    else:\n        return (minimal*maximal*lezter)/3\n")),Object(i.b)("p",null,"Hier fallen direkt 3 Probleme auf:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Es ist nur sehr schwierig lesbar"),Object(i.b)("li",{parentName:"ol"},"Man wiederholt sich sehr oft"),Object(i.b)("li",{parentName:"ol"},"Es ist einfach aus Versehen eine Eigenschaft zu vergessen")),Object(i.b)("p",null,'Um diese Probleme zu loesen, gab es viele Ansaetze, wovon das meist genutzte die "Objektorientierte Programmierung" ist.'),Object(i.b)("h2",{id:"klassen-und-objekte"},"Klassen und Objekte"),Object(i.b)("p",null,"Um Probleme der reellen Welt in Code zu abstrahieren, bietet es sich an, hier auch mit einem Auto, statt mit einer Liste an Werten, zu arbeiten."),Object(i.b)("p",null,'Und genau dies sind Klassen und Objekte. Hier ist eine Klasse "Auto" quasi der "Bauplan" fuer Autos, welcher definiert, was genau ein Auto hat.'),Object(i.b)("p",null,"Nach obigen Ueberlegungen muessen wir nur noch definieren, wie genau der Bauplan ein Auto erstellen soll:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"Bauplan Auto:\n    Erstellung des Autos:\n    (Hierfuer benoetige ich Baujahr, Kaufpreis, Marke, Modell,\n      Extraausstattungen und ob es unfallfrei ist.)\n\n    Setze fest, dass bei diesem Auto das Baujahr das Uebergebene Baujahr ist.\n    Dann setze fest, dass bei diesem Auto der Kaufpreis dem Uebergebenen gleicht.\n    Dann setze fest, dass bei diesem Auto die Marke und das Modell uebereinstimmt.\n    Dann setze fest, dass die Ausstattung uebereinstimmt.\n    Dann halte fest, ob das Auto unfallfrei ist.\nBauplan Ende.\n")),Object(i.b)("p",null,"Hierfuer sieht der Pythoncode sehr aehnlich aus:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"class Auto:\n    def __init__(self,baujahr, kaufpreis,marke,modell,ausstattung,unfallfrei):\n        self.baujahr = baujahr\n        self.kaufpreis = kaufpreis\n        self.marke = marke\n        self.modell = modell\n        self.ausstattung = ausstattung\n        self.unfallfrei = unfallfrei\n")),Object(i.b)("p",null,"Auch wenn das meiste selbsterklaerend sein sollte, hier doch noch 1-2 Dinge:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"class")," beschreibt, dass eine Klasse beginnt, genau so wie ",Object(i.b)("inlineCode",{parentName:"li"},"def")," eine Funktion."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"self")," bedeutet, dass es auf die das Objekt des Bauplans (hier das einzelne Auto) bezogen ist. Mehr hierzu spaeter."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"__init__"),' ist ein von Python festgelegter Name. Dieser kommt von "initialisation" und wird bei der Erstellung aufgerufen. Allgemein als Richtlinie gilt: ',Object(i.b)("inlineCode",{parentName:"li"},"__funktionsname__")," ist eine interne Funktion.")),Object(i.b)("p",null,"Nun koennen wir unser erstes Auto erstellen! und dann einfach mit ",Object(i.b)("inlineCode",{parentName:"p"},"autoobjekt.information")," diese Aufrufen!"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'auto_zum_verkauf = Auto(2019, 50000, "Audi", "A4", "", True)\n\nprint("Das Auto ist ein " + auto_zum_verkauf.marke\n      + " " + auto_zum_verkauf.modell\n      + " aus dem Jahr " + str(auto_zum_verkauf.baujahr))\n')),Object(i.b)("p",null,"Hierbei ist ",Object(i.b)("inlineCode",{parentName:"p"},"auto_zum_verkauf")," unser Autoobjekt."),Object(i.b)("p",null,"Nun koennen wir ",Object(i.b)("strong",{parentName:"p"},"ENDLICH")," unsere Methode schoener schreiben!"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"def wert_rechner(auto):\n    letzter = letzter_verkaufswert(auto)\n\n    maximal = hoechster_verkaufswert(auto)\n\n    minimal = niederigster_verkaufswert(auto)\n\n    liste = listenpreis(auto)\n\n    if (minimal < listenpreis):\n        return (liste*maximal*letzter)/3\n    else:\n        return (minimal*maximal*lezter)/3\n")),Object(i.b)("h2",{id:"objektmethoden"},"Objektmethoden"),Object(i.b)("p",null,"Wenn man weiter an Objekte in der reellen Welt denkt, kann man Funktionen in 2 Kategorien aufteilen:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Dinge die an dem Auto selbst passieren (fahren, bremsen) (Objektmethode)"),Object(i.b)("li",{parentName:"ul"},"Dinge wofuer ein Auto gebraucht wird (Belegen eines Parkplatzes) (Normale Funktion)")),Object(i.b)("p",null,"Objektmethoden zeichnen sich dadurch aus, dass sie kein Sinn hat, diese ohne das Objekt aufzurufen. Es ist halt nicht moeglich, ein Auto zu fahren, welches nicht existiert."),Object(i.b)("p",null,"In Python schreibt man Objektmethoden in Klassen selbst, wofuer das oben benannte ",Object(i.b)("inlineCode",{parentName:"p"},"self")," dafuer steht, dass es sich auf das eigene Objekt bezieht."),Object(i.b)("p",null,"Als Beispiel nun mit der Methode ",Object(i.b)("inlineCode",{parentName:"p"},"unfall_bauen"),", welche als Folge unfallfrei auf falsch setzt."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"class Auto:\n    def __init__(self,baujahr, kaufpreis,marke,modell,ausstattung,unfallfrei):\n        self.baujahr = baujahr\n        self.kaufpreis = kaufpreis\n        self.marke = marke\n        self.modell = modell\n        self.ausstattung = ausstattung\n        self.unfallfrei = unfallfrei\n\n    def unfall_bauen(self):\n        self.unfallfrei = False\n")),Object(i.b)("h3",{id:"klassen-printen"},"Klassen printen"),Object(i.b)("p",null,"Zuletzt ist es noch sinnvoll, dass das printen wie erwartet klappt."),Object(i.b)("p",null,"Wie wir bereits gelernt haben, sind Funktionen wie ",Object(i.b)("inlineCode",{parentName:"p"},"__init__")," von Python selbst gestellte Funktionen.\nZum printen von Funktionen gibt es nun die von Python gestellte ",Object(i.b)("inlineCode",{parentName:"p"},"__str__"),", welche man einfach definieren muss. Beispiel:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'class Person:\n    def __init__(self, vorname, nachname, alter):\n        self.vorname = vorname\n        self.nachname = nachname\n        self.alter = alter\n\n    # Coole weitere Funktionen\n    # ...\n\n    def __str__(self):\n        string_zur_ausgabe = self.vorname + " " + self.nachname + ": " + str(self.alter) + " Jahre alt."\n        return string_zur_ausgabe\n\njohn = Person("John", "Doe", 36)\nprint(john)\n')),Object(i.b)("h3",{id:"beispiele"},"Beispiele"),Object(i.b)("p",null,"So wuerde man z.B. ein Verein definieren"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'class Verein:\n    name = None\n    mitglieder = []\n    vorsitzender = None\n\n    # Konstruktor\n    def __init__(self, name, vorsitzender):\n        self.name = name\n        self.vorsitzender = vorsitzender\n\n    # Hier wird eine Person als neues_mitglied erwartet\n    # Dies ist eine Objektmethode, da es am Verein selbst passiert.\n    # Beachte: Der Print von neues Mitglied klappt nur,\n    # da __str__ hierfuer definiert ist.\n    def mitglied_beitritt(self, neues_mitglied):\n        self.mitglieder.append(neues_mitglied)\n        print("Neues Mitglied!")\n        print(neues_mitglied)\n\n    def mitgleid_austritt(self, altes_mitglied):\n        if altes_mitglied not in self.mitglieder:\n            print("Diese Person war nie im Verein!")\n            return\n        else:\n            print("Folgende Person verliess den Verein:")\n            print(altes_mitglied)\n            print(":(")\n')))}d.isMDXComponent=!0},112:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return f}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=r.a.createContext({}),b=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s({},n,{},e)),t},d=function(e){var n=b(e.components);return r.a.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),d=b(t),c=a,p=d["".concat(l,".").concat(c)]||d[c]||m[c]||i;return t?r.a.createElement(p,s({ref:n},o,{components:t})):r.a.createElement(p,s({ref:n},o))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var o=2;o<i;o++)l[o]=t[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);